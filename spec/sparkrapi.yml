swagger: '2.0'
info:
  version: 0.1.0
  title: sparkr_server
basePath: /api
paths:
  '/Members/{id}/accessTokens/{fk}':
    get:
      tags:
        - Member
      summary: Find a related item by id for accessTokens.
      operationId: Member.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Member
      summary: Delete a related item by id for accessTokens.
      operationId: Member.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Member
      summary: Update a related item by id for accessTokens.
      operationId: Member.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Members/{id}/accessTokens':
    get:
      tags:
        - Member
      summary: Queries accessTokens of Member.
      operationId: Member.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Member
      summary: Creates a new instance in accessTokens of this model.
      operationId: Member.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Member
      summary: Deletes all accessTokens of this model.
      operationId: Member.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/accessTokens/count':
    get:
      tags:
        - Member
      summary: Counts accessTokens of Member.
      operationId: Member.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Members:
    post:
      tags:
        - Member
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Member.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    patch:
      tags:
        - Member
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Member.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    put:
      tags:
        - Member
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Member.replaceOrCreate__put_Members
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    get:
      tags:
        - Member
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Member.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
      deprecated: false
  /Members/replaceOrCreate:
    post:
      tags:
        - Member
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Member.replaceOrCreate__post_Members_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  /Members/upsertWithWhere:
    post:
      tags:
        - Member
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Member.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/Members/{id}/exists':
    get:
      tags:
        - Member
      summary: Check whether a model instance exists in the data source.
      operationId: 'Member.exists__get_Members_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Members/{id}':
    head:
      tags:
        - Member
      summary: Check whether a model instance exists in the data source.
      operationId: 'Member.exists__head_Members_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Member
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Member.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    put:
      tags:
        - Member
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Member.replaceById__put_Members_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - Member
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Member.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Member
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Member.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/Members/{id}/replace':
    post:
      tags:
        - Member
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Member.replaceById__post_Members_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  /Members/findOne:
    get:
      tags:
        - Member
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Member.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  /Members/update:
    post:
      tags:
        - Member
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Member.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Members/count:
    get:
      tags:
        - Member
      summary: Count instances of the model matched by where from the data source.
      operationId: Member.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Members/change-stream:
    post:
      tags:
        - Member
      summary: Create a change stream.
      operationId: Member.createChangeStream__post_Members_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Member
      summary: Create a change stream.
      operationId: Member.createChangeStream__get_Members_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Members/login:
    post:
      tags:
        - Member
      summary: Login a user with username/email and password.
      operationId: Member.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Members/logout:
    post:
      tags:
        - Member
      summary: Logout a user with access token.
      operationId: Member.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/verify':
    post:
      tags:
        - Member
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: Member.prototype.verify
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/confirm:
    get:
      tags:
        - Member
      summary: Confirm a user registration with identity verification token.
      operationId: Member.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/reset:
    post:
      tags:
        - Member
      summary: Reset password for a user with email.
      operationId: Member.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/change-password:
    post:
      tags:
        - Member
      summary: Change a user's password.
      operationId: Member.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/reset-password:
    post:
      tags:
        - Member
      summary: Reset user's password via a password-reset token.
      operationId: Member.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Teams/{id}/teamOwner':
    get:
      tags:
        - Team
      summary: Fetches belongsTo relation teamOwner.
      operationId: Team.prototype.__get__teamOwner
      parameters:
        - name: id
          in: path
          description: Team id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  /Teams:
    post:
      tags:
        - Team
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Team.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
    patch:
      tags:
        - Team
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Team.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
    put:
      tags:
        - Team
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Team.replaceOrCreate__put_Teams
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
    get:
      tags:
        - Team
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Team.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
      deprecated: false
  /Teams/replaceOrCreate:
    post:
      tags:
        - Team
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Team.replaceOrCreate__post_Teams_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
  /Teams/upsertWithWhere:
    post:
      tags:
        - Team
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Team.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
  '/Teams/{id}/exists':
    get:
      tags:
        - Team
      summary: Check whether a model instance exists in the data source.
      operationId: 'Team.exists__get_Teams_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Teams/{id}':
    head:
      tags:
        - Team
      summary: Check whether a model instance exists in the data source.
      operationId: 'Team.exists__head_Teams_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Team
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Team.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
    put:
      tags:
        - Team
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Team.replaceById__put_Teams_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
    delete:
      tags:
        - Team
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Team.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Team
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Team.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Team id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
  '/Teams/{id}/replace':
    post:
      tags:
        - Team
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Team.replaceById__post_Teams_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
  /Teams/findOne:
    get:
      tags:
        - Team
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Team.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Team'
      deprecated: false
  /Teams/update:
    post:
      tags:
        - Team
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Team.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Teams/count:
    get:
      tags:
        - Team
      summary: Count instances of the model matched by where from the data source.
      operationId: Team.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Teams/change-stream:
    post:
      tags:
        - Team
      summary: Create a change stream.
      operationId: Team.createChangeStream__post_Teams_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Team
      summary: Create a change stream.
      operationId: Team.createChangeStream__get_Teams_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
tags:
  - name: Member
  - name: Team
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        $ref: '#/definitions/ObjectID'
    required:
      - id
    additionalProperties: false
  Member:
    properties:
      loginType:
        type: string
      college:
        type: string
      major:
        type: string
      role:
        type: string
      linkedin:
        type: string
      github:
        type: string
      thumbnail:
        type: string
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - college
      - major
      - role
      - email
    additionalProperties: false
  Team:
    properties:
      name:
        type: string
      description:
        type: string
      members:
        type: array
        items:
          type: number
          format: double
      invitations:
        type: array
        items:
          type: number
          format: double
      id:
        $ref: '#/definitions/ObjectID'
      teamOwnerId:
        $ref: '#/definitions/ObjectID'
    required:
      - name
      - description
      - members
    additionalProperties: false
  ObjectID:
    type: string
    pattern: '^[a-fA-F\d]{24}$'
